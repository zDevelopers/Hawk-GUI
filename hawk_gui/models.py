import random
import string

from django.conf import settings
from django.db import models
from django.urls import reverse_lazy
from django.utils.html import format_html
from django.utils.translation import gettext_lazy as _


def _report_location(instance, filename, report_filename):
    """
    Returns the location of a report file.

    :param instance: The instance of the saved report.
    :param filename: The original filename (unused).
    :param report_filename: The filename in the report directory (without “.json”).

    :return: A function compatible with Django's upload_to.
    """
    return f"reports/{instance.slug[0:2]}/{instance.slug}/{report_filename}.json"


def raw_report_location(instance, filename):
    return _report_location(instance, filename, "raw-report")


def processed_report_location(instance, filename):
    return _report_location(instance, filename, "report")


# TODO add fields `live` for live reports and `update_key` randomly generated to allow updating.
class Report(models.Model):
    """
    Represents a report in the database.

    The report is mainly stored in a JSON file on the filesystem. This being
    said, some data are stored on the database for both faster lookup while
    loading a report to display it on its page, and easier statistics.
    """

    class Meta:
        verbose_name = _("report")
        verbose_name_plural = _("reports")
        ordering = ["-published_at"]

    """
    The slug of the report, used in the URL.
    """
    slug = models.SlugField(_("Slug"), max_length=128, db_index=True, unique=True)

    """
    The report's UUID, used for updates.
    """
    uuid = models.UUIDField(_("UUID"), editable=False)

    """
    The report's title.
    """
    title = models.CharField(_("Title"), max_length=256, editable=False)

    """
    The report's creation date, i.e. when it was first published.
    """
    published_at = models.DateTimeField(
        _("Published at"), auto_now_add=True, editable=False
    )

    """
    The IP of the published of this report. Never published, anti-abuse only.
    """
    published_by = models.GenericIPAddressField(
        _("Published by"), blank=True, null=True, editable=False
    )

    """
    The Minecraft version this report was generated for.
    """
    minecraft_version = models.CharField(
        _("Minecraft version"),
        max_length=64,
        db_index=True,
        blank=True,
        null=True,
        editable=False,
    )

    """
    The plugin this report was generated by.
    """
    generator_name = models.CharField(
        _("Generator"),
        max_length=128,
        db_index=True,
        blank=True,
        null=True,
        editable=False,
    )

    """
    The link to the plugin this report was generated by.
    """
    generator_link = models.URLField(
        _("Generator link"), blank=True, null=True, editable=False
    )

    """
    A naive views counter for vague statistics.
    """
    views_count = models.IntegerField(_("Views count"), default=0, editable=False)

    """
    The raw report file, as sent to the server by the plugin or user through
    the publication view.
    """
    raw_report = models.FileField(_("Raw report"), upload_to=raw_report_location)

    """
    The processed report file, as returned by the Rust processing utility and
    containing all pre-computed values ready-to-be-displayed in the template.
    """
    processed_report = models.FileField(
        _("Processed report"), upload_to=processed_report_location
    )

    def __str__(self):
        generator = f" by {self.generator_name}" if self.generator_name else ""
        minecraft = (
            f" on Minecraft {self.minecraft_version}" if self.minecraft_version else ""
        )

        return f"Report at {self.slug}{generator}{minecraft}"

    def save(self, **kwargs):
        """
        Generates a random unique slug on the fly if needed.
        """
        if not self.slug:
            slug = None
            while slug is None:
                slug = "".join(
                    random.choices(
                        string.ascii_lowercase + string.digits,
                        k=settings.HAWK['SLUG_LENGTH'],
                    )
                )
                # We said unique slug
                if Report.objects.filter(slug=slug).exists():
                    slug = None
            self.slug = slug
        return super(Report, self).save(**kwargs)

    def get_absolute_url(self):
        return reverse_lazy("report", args=(self.slug,))

    def get_generator_with_html_link(self):
        if self.generator_link:
            return format_html(
                '<a href="{}">{}</a>', self.generator_link, self.generator_name
            )
        else:
            return self.generator_name

    get_generator_with_html_link.short_description = _("Generator")
    get_generator_with_html_link.admin_order_field = "generator_link"

    def get_minecraft_version_full(self):
        return (
            self.minecraft_version
            if not self.minecraft_version
            or self.minecraft_version.lower().startswith("minecraft")
            else f"Minecraft {self.minecraft_version}"
        )

    get_minecraft_version_full.short_description = _("Minecraft version")
    get_minecraft_version_full.admin_order_field = "minecraft_version"

    def get_slug_for_admin(self):
        return format_html('<code style="color: #447e9b">{}</code>', self.slug)

    def get_uuid_for_admin(self):
        return format_html("<code>{}</code>", self.uuid)

    def get_title_for_admin(self):
        return format_html('<a href="{}">{}</a>', self.get_absolute_url(), self.title)

    get_slug_for_admin.short_description = _("Slug")
    get_uuid_for_admin.short_description = _("UUID")
    get_title_for_admin.short_description = _("Title")
